"""
Данный бот является информационным.
Он позволяет передвигаться по информационному дереву
данных. Реализован при применении материнских и дочерних id
для перемещения по дереву, а так же полезная нагрузка (payload)
которая отправляется вместе с кнопками клавиатуры.
Payload играет ключевую роль в реализации данного бота,
так как именно с его помощью передаётся id команд.

"""
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import vk_api, random
import pymysql.cursors
import re

class Pattern():
    def __init__(self):
        self.token, self.group_id = 'token','group id'
        self.databasePassword = '12345'

        self.vk_session = vk_api.VkApi(token=self.token)
        self.session_api = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, self.group_id)
        self.connection = pymysql.connect(host='localhost',
                                     user='root',
                                     password=self.databasePassword)


        self.save_file()


        self.connect = pymysql.connect(host='localhost',
                                       user='root',
                                       password=self.databasePassword,
                                       db='info_db',
                                       charset='utf8mb4',
                                       cursorclass=pymysql.cursors.DictCursor
                                       )

        # Реагируем

        while True:
            try:
                for self.event in self.longpoll.listen():
                    if self.event.type == VkBotEventType.MESSAGE_NEW:
                        print('Текст сообщения: ' + str(self.event.obj.text))

                        if self.event.obj.payload != None:
                            self.payload = int(self.event.obj.payload)
                        else:
                            self.payload = 1

                        if not self.event.obj.from_me:
                            try:
                                self.create_keyboard()
                                # если получиться найти фотки, то отделяем сообщение по @@@, слева информация, справа список фото через запятую до 10 штук например
                                # бла бла бла бла бла @@@photo-176874916_456239383,photo-176874916_456239383,photo-176874916_456239383
                                print(self.dbRequest('message','id',self.payload))
                                print(self.dbRequest('message','id',self.payload))
                                print(self.dbRequest('message','id',self.payload))
                                if self.dbRequest('message','id',self.payload) !=-1:
                                # if self.pattern[int(self.payload)][2].find('@@@') != -1:
                                    attachment = self.dbRequest('message','id',self.payload).split('@@@')[1]
                                    text = self.dbRequest('message','id',self.payload).split('@@@')[0]
                                    print(attachment)
                                else:
                                    attachment = ''
                                    text = self.dbRequest('message','id',self.payload)
                                if len(self.commands) == 0:
                                    self.send_message(message=text,
                                                      peer_id=self.event.obj.peer_id,
                                                      keyboard=self.keyboard,
                                                      attachment=attachment
                                                      )
                                else:
                                    print('отправляем')
                                    self.send_message(message="{0}\n\nВ раздел '{1}'  входит:\n {2}".format(
                                        # text, self.pattern[int(self.payload)][0], '\n'.join(self.commands)),
                                        text, self.dbRequest('request','id',self.payload), '\n'.join(self.commands)),
                                        peer_id=self.event.obj.peer_id,
                                        keyboard=self.keyboard,
                                        attachment=attachment

                                    )
                            except Exception as e:
                                print(e)

            except Exception as e:
                print(e)
    def dbRequest(self, first, second, thirty):
        with self.connect.cursor() as cursor:
            cursor.execute("""select {0} from elements where {1} = {2}""".format(first, second, thirty))
        return cursor.fetchall()[0][first]


    def create_keyboard(self):
        keyboard = vk_api.keyboard.VkKeyboard(one_time=True)
        with open("info.txt", 'r') as f:
            self.pattern = eval(f.read())
        self.commands = []
        self.payloads = []
        # Находим все дочернии команды
        # В цикле ищем совпадения по payload, если есть, то добавляем в список команду и его payload
        n = 1
        for _ in self.pattern:
            if self.pattern[_][1] == self.payload:
                # self.commands.append(self.pattern[_][0])

                self.commands.append(str(n) + ': ' + self.pattern[_][0])
                self.payloads.append(_)
                n += 1
        print(self.commands)
        if len(self.commands) != 0:
            for _ in range(len(self.commands)):
                # if _ % 2 == 0 and _ != 0 or _ !=0 and len(self.commands[_-1])>30:
                if _ % 4 == 0 and _ != 0:
                    keyboard.add_line()
                # keyboard.add_button(self.commands, payload=self.payloads[_],color=VkKeyboardColor.PRIMARY)
                keyboard.add_button(_ + 1, payload=self.payloads[_], color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
        keyboard.add_button('Назад', payload=self.pattern[self.payload][1], color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('В начало', payload=1, color=VkKeyboardColor.NEGATIVE)
        self.keyboard = keyboard.get_keyboard()

    def send_message(self, peer_id, message=None, attachment=None, keyboard=None, payload=None):
        self.session_api.messages.send(peer_id=peer_id, message=message,
                                       random_id=random.randint(-2147483648, +2147483648),
                                       attachment=attachment, keyboard=keyboard, payload=payload)

    def save_file(self):
        try:
            self.connection.cursor().execute("""drop database info_db""")
        except:
            pass
        self.create = """-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema info_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema info_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `info_db` DEFAULT CHARACTER SET utf8 ;
USE `info_db` ;

-- -----------------------------------------------------
-- Table `info_db`.`elements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `info_db`.`elements` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `request` MEDIUMTEXT NULL DEFAULT NULL,
  `motherRelational` INT(11) NULL DEFAULT NULL,
  `message` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
"""
        for element in self.create.split(';'):
            try:
                print(element)
                self.connection.cursor().execute(element)
                self.connection.commit()
            except:
                print("FAIL IN " + str(element))

        self.connection.close()
        # первым у нас идёт команда (условная, необязательно такая же как и на кнопке)
        # Вторым у нас идёт материнский айди, т.е. айди той команды к которому привязана данная
        # третим у нас идёт текст сообщения, который отправляется пользователю
        pattern = {1: ["Начало", 0, "Hello World @@@photo-176874916_456239383"],
                   2: ["Рассказать о направлении подготовки", 1, "Рассказать о направлении подготовки"],
                   3: ["Очная форма обучения", 2, "Оооочная форма обучения"],
                   4: ["ФБ", 3, "ФБ"],
                   5: ["Экономическая безопасность", 4,
                       "Экономическая безопасность @@@photo-176874916_456239383,photo-176874916_456239383кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393кономическая безопасность @@@photo-176874916_456239383,photo-176874916_4562393"],
                   6: ["Информационноаналитические системы безопасности", 4,
                       "Информационноаналитические системы безопасности"],
                   7: ["Информационная безопасность автоматизированных систем", 4,
                       "Информационная безопасность автоматизированных систем"],
                   8: ["Информационная безопасность", 4, "Информационная безопасность"],
                   9: ["Информационная безопасность телекоммуникационных систем", 4,
                       "Информационная безопасность телекоммуникационных систем"],
                   10: ["ЮФ", 3, "ЮФ"],
                   11: ["Юриспруденция", 10, "Юриспруденция"],
                   12: ["ФИТ", 3, "ФИТ"],
                   13: ["Инноватика", 12, "Инноватика"],
                   14: ["Управление качеством", 12, "Управление качеством"],
                   15: ["ГФ", 3, "ГФ"],
                   16: ["Организация работы с молодёжью", 15, "Организация работы с молодёжью"],
                   17: ["Социальная работа", 15, "Социальная работа"],
                   18: ["ЭФ", 3, "ЭФ"],
                   19: ["Менеджмент", 18, "Менеджмент"],
                   20: ["Экономика", 18, "Экономика"],
                   21: ["Управление персоналом", 18, "Управление персоналом"],
                   22: ["ФЭТ", 3, "ФЭТ"],
                   23: ["Электроника и наноэлектроника", 22, "Электроника и наноэлектроника"],
                   24: ["Фотоника и оптоинформатика", 22, "Фотоника и оптоинформатика"],
                   25: ["Информатика и вычислительная техника", 22, "Информатика и вычислительная техника"],
                   26: ["Нанотехнологии и микросистемная техника", 22, "Нанотехнологии и микросистемная техника"],
                   27: ["РТФ", 3, "РТФ"],
                   28: ["Радиотехника", 27, "Радиотехника"],
                   29: ["Инфокоммуникационные технологии и системы связи", 27,
                        "Инфокоммуникационные технологии и системы связи"],
                   30: ["Радиоэлектронные системы и комплексы", 27, "Радиоэлектронные системы и комплексы"],
                   31: ["РКФ", 3, "РКФ"],
                   32: ["Техносферная безопасность", 31, "Техносферная безопасность"],
                   33: ["Экология и природопользование", 31, "Экология и природопользование"],
                   34: ["Конструирование и технология электронных средств", 31,
                        "Конструирование и технология электронных средств"],
                   35: ["Техническая эксплуатация транспортного радиоборудования", 31,
                        "Техническая эксплуатация транспортного радиоборудования"],
                   36: ["ФВС", 3, "ФВС"],
                   37: ["Системные анализ и управление", 36, "Системные анализ и управление"],
                   38: ["Автоматизация технологических процессов и производств", 36,
                        "Автоматизация технологических процессов и производств"],
                   39: ["Информационные системы и технологии", 36, "Информационные системы и технологии"],
                   40: ["Управление в технических системах", 36, "Управление в технических системах"],
                   41: ["Информатика и вычислительная техника", 36, "Информатика и вычислительная техника"],
                   42: ["ФСУ", 3, "ФСУ"],
                   43: ["Государственное и муниципальное управление", 42,
                        "Государственное и муниципальное управление"],
                   44: ["Информатика и вычислительная техника", 42, "Информатика и вычислительная техника"],
                   45: ["Программная инженерия", 42, "Программная инженерия"],
                   46: ["Бизнес-информатика", 42, "Бизнес-информатика"],
                   47: ["Прикладная информатика", 42, "Прикладная информатика"],
                   48: ["Заочная форма обучения", 2, "Заочная форма обучения"],
                   49: ["Государственное и муниципальное управление", 48,
                        "Государственное и муниципальное управление"],
                   50: ["Программная инженерия", 48, "Программная инженерия"],
                   51: ["Управление персоналом", 48, "Управление персоналом"],
                   52: ["Экономика", 48, "Экономика"],
                   53: ["Информатика и вычислительная техника", 48, "Информатика и вычислительная техника"],
                   54: ["Менеджмент", 48, "Менеджмент"],
                   55: ["Прикладная информатика", 48, "Прикладная информатика"],
                   56: ["Инфокоммуникационные технологии и системы связи", 48,
                        "Инфокоммуникационные технологии и системы связи"],
                   57: ["Социальная работа", 48, "Социальная работа"],
                   58: ["Радиотехника", 48, "Радиотехника"],
                   59: ["Экономическая безопасность", 48, "Экономическая безопасность"],
                   60: ["Электроника и наноэлектроника", 48, "Электроника и наноэлектроника"],
                   61: ["Календарь абитуриента", 1, "Календарь абитуриента"],
                   62: ["Рассказать о поступлении", 1, "Рассказать о поступлении"],
                   63: ["Приём документов", 62, "Приём документов"],
                   64: ["Приказы о зачислении", 62, "Приказы о зачислении"],
                   65: ["Приём иностранных граждан", 62, "Приём иностранных граждан"],
                   66: ["Минимальные баллы", 62, "Минимальные баллы"],
                   67: ["Общежития", 62, "Общежития"],
                   68: ["Рассказать о контактах", 1, "Рассказать о контактах"],
                   69: ["Задать вопрос", 68, "Задать вопрос"],
                   70: ["Ответственные секретари отборочных комиссий", 68,
                        "Ответственные секретари отборочных комиссий"],
                   71: ["Рассказать о ТУСУРе", 1, "Рассказать о ТУСУРе"],
                   72: ["Почему ТУСУР?", 71, "Почему ТУСУР"],
                   73: ["История ТУСУРа", 71, "История ТУСУРа"],
                   74: ["Творчество в ТУСУРе", 71, "Творчество в ТУСУРе"],
                   75: ["Стипендия", 71, "Стипендия"],
                   76: ["Спорт", 71, "Спорт"],
                   77: ['Возможность скачать файлы', 63,
                        'Возможность скачать файлы: https://magistrant.tusur.ru/ru/dokumenty'],
                   78: ['1 общежитие', 67, '1 общежитие фото, ссылка'],
                   79: ['2 общежитие', 67, '2 общежитие фото, ссылка'],
                   80: ['3 общежитие', 67, '3 общежитие фото, ссылка'],
                   81: ['4 общежитие', 67, '4 общежитие фото, ссылка'],
                   82: ['5 общежитие', 67, '5 общежитие фото, ссылка'],
                   83: ['6 общежитие', 67, '6 общежитие фото, ссылка'],
                   84: ['Направления подготовки магистратуры', 1, 'Направления подготовки магистратуры'],
                   85: ['Заочная форма обучения', 84, 'Заочная форма обучения'],
                   86: ['Электроника и наноэлектроника', 85, 'Электроника и наноэлектроника'],
                   87: ['Электронные приборы, устройства сбора, обработки и отображения информации', 86,
                        'Электронные приборы, устройства сбора, обработки и отображения информации'],
                   88: ['Экономика', 85, 'Экономика'],
                   89: ['Экономика предпринимательства', 88, 'Экономика предпринимательства'],
                   90: ['Менеджмент', 85, 'Менеджмент'],
                   91: ['Управление бизнесом', 90, 'Управление бизнесом'],
                   92: ['Очная форма обучения', 84, 'Очная форма обучения'],
                   93: ['РТФ', 92, 'РТФ'],
                   94: ['Радиотехника', 93, 'Радиотехника'],
                   95: ['Микроволновая техника и антенны', 94, 'Микроволновая техника и антенны'],
                   96: ['Радиоэлектронные устройства передачи информации', 94,
                        'Радиоэлектронные устройства передачи информации'],
                   97: ['Защита от электромагнитного терроризма', 94, 'Защита от электромагнитного терроризма'],
                   98: ['Радиотехнические системы и комплексы', 94, 'Радиотехнические системы и комплексы'],
                   99: ['Системы и устройства передачи, приёма и обработки сигналов', 94,
                        'Системы и устройства передачи, приёма и обработки сигналов'],
                   100: ['Видеоинформационные технологии и цифровое телевидение', 94,
                         'Видеоинформационные технологии и цифровое телевидение'],
                   101: ['Инфокоммуникационные технологии и системы связи', 93,
                         'Инфокоммуникационные технологии и системы связи'],
                   102: ['Активное зрение роботов', 101, 'Активное зрение роботов'],
                   103: ['Защищённые системы связи', 101, 'Защищённые системы связи'],
                   104: ['Электромагнитная совместимость радиэлектронной аппаратуры', 101,
                         'Электромагнитная совместимость радиэлектронной аппаратуры'],
                   105: ['Радиоэлектронные системы передачи информации', 101,
                         'Радиоэлектронные системы передачи информации'],
                   106: ['Инфокоммуникационные системы беспроводного широкополосного доступа', 101,
                         'Инфокоммуникационные системы беспроводного широкополосного доступа'],
                   107: ['Электромагнитная совместимость в топливноэнергетическом комплексе', 101,
                         'Электромагнитная совместимость в топливноэнергетическом комплексе'],
                   108: ['Оптические системы связи и обработки информации', 101,
                         'Оптические системы связи и обработки информации'],
                   109: ['РКФ', 92, 'РКФ'],
                   110: ['Прикладная математика и информатика', 109, 'Прикладная математика и информатика'],
                   111: ['Компьютерное моделирование в задачах экологии и техносферной безопасности', 110,
                         'Компьютерное моделирование в задачах экологии и техносферной безопасности'],
                   112: ['Электроника и наноэлектроника', 109, 'Электроника и наноэлектроника'],
                   113: ['Приборы, технологии котроля  качества и диагностики', 112,
                         'Приборы, технологии котроля  качества и диагностики'],
                   114: ['Конструирование и производство бортовой космической радиоаппаратуры', 112,
                         'Конструирование и производство бортовой космической радиоаппаратуры'],
                   115: ['Управление в технических системах', 109, 'Управление в технических системах'],
                   116: ['Управление в светотехнических системах', 115, 'Управление в светотехнических системах'],
                   117: ['ФВС', 92, 'ФВС'],
                   118: ['Управление в технических системах', 117, 'Управление в технических системах'],
                   119: ['Управление и автоматизация технологических процессов и производств', 118,
                         'Управление и автоматизация технологических процессов и производств'],
                   120: ['Компьютерное моделирование и обработка информации в технических системах', 118,
                         'Компьютерное моделирование и обработка информации в технических системах'],
                   121: ['Информатика и вычислительная техника', 117, 'Информатика и вычислительная техника'],
                   122: ['Информационное обеспечение  аппаратнопрограммных комплексов', 121,
                         'Информационное обеспечение  аппаратнопрограммных комплексов'],
                   123: ['Информационное и программное обеспечение автоматизированных систем', 121,
                         'Информационное и программное обеспечение автоматизированных систем'],
                   124: ['Автоматизация проектирования микро- и наноэлектронных устройств для радиотехнических систем',
                         121,
                         'Автоматизация проектирования микро- и наноэлектронных устройств для радиотехнических систем'],
                   125: ['ФСУ', 92, 'ФСУ'],
                   126: ['Информатика и вычислительная техника', 125, 'Информатика и вычислительная техника'],
                   127: ['Программное обеспечение вычислительных машин,систем и компьютерных сетей', 126,
                         'Программное обеспечение вычислительных машин,систем и компьютерных сетей'],
                   128: ['Автоматизированные системы обработки информации и управления в экономике', 126,
                         'Автоматизированные системы обработки информации и управления в экономике'],
                   129: ['Программная инженерия', 125, 'Программная инженерия'],
                   130: ['Методы и технологии индустриального проектирования программного обеспечения', 129,
                         'Методы и технологии индустриального проектирования программного обеспечения'],
                   131: ['Государственное и муниципальное управление', 125,
                         'Государственное и муниципальное управление'],
                   132: ['Информатизация государственного и муниципального управления', 131,
                         'Информатизация государственного и муниципального управления'],
                   133: ['Бизнес-информатика', 125, 'Бизнес-информатика'],
                   134: ['Предпринимательство и организация бизнеса в сфере информационных технологий', 133,
                         'Предпринимательство и организация бизнеса в сфере информационных технологий'],
                   135: ['ФЭТ', 92, 'ФЭТ'],
                   136: ['Фотоника и оптоинформатика', 135, 'Фотоника и оптоинформатика'],
                   137: ['Фотоника волноводных, нелинейных и периодических структур', 136,
                         'Фотоника волноводных, нелинейных и периодических структур'],
                   138: ['Электроника и наноэлектроника', 135, 'Электроника и наноэлектроника'],
                   139: ['Электронные приборы и устройства сбора, обработки и отображения информации', 138,
                         'Электронные приборы и устройства сбора, обработки и отображения информации'],
                   140: ['Твердотельная техника', 138, 'Твердотельная техника'],
                   141: ['Промышленная электроника и микропроцессорная техника', 138,
                         'Промышленная электроника и микропроцессорная техника'],
                   142: ['Квантовая и оптическая электроника', 138, 'Квантовая и оптическая электроника'],
                   143: ['ФИТ', 92, 'ФИТ'],
                   144: ['Инноватика', 143, 'Инноватика'],
                   145: ['Управление инновациями в электронной технике', 144,
                         'Управление инновациями в электронной технике'],
                   146: ['Управление качеством', 143, 'Управление качеством'],
                   147: ['Управление качесвтом промышленной продукции и услуг', 146,
                         'Управление качесвтом промышленной продукции и услуг'],
                   148: ['Мехатроника и роботехника', 143, 'Мехатроника и роботехника'],
                   149: ['Управление инновациями в электронной технике', 148,
                         'Управление инновациями в электронной технике'],
                   150: ['ЭФ', 92, 'ЭФ'],
                   151: ['Экономика', 150, 'Экономика'],
                   152: ['Экономика предпринимательства', 151, 'Экономика предпринимательства'],
                   153: ['Менеджмент', 150, 'Менеджмент'],
                   154: ['Управление проектами', 153, 'Управление проектами'],
                   155: ['Управление бизнесом', 153, 'Управление бизнесом'],
                   156: ['ФБ', 92, 'ФБ'],
                   157: ['Электроника и наноэлектроника', 156, 'Электроника и наноэлектроника'],
                   158: ['Микроэлектроника в информационных и управляющих системах ', 157,
                         'Микроэлектроника в информационных и управляющих системах'],
                   159: ['Очная форма ', 61, 'Очная форма'],
                   160: ['Заочная форма ', 61, 'Заочная форма']

                   }
        self.connect = pymysql.connect(host='localhost',
                                  user='root',
                                  password=self.databasePassword,
                                  db='info_db',
                                  charset='utf8mb4',
                                  cursorclass=pymysql.cursors.DictCursor
                                  )
        b=[]
        for key, item in pattern.items():
            b.append(item)
        self.result = re.sub("]", ")", str(b))
        self.result = re.sub(re.escape('['), "(", str(self.result))[1:len(self.result) - 1]
        with self.connect.cursor() as self.cursor:
            print(self.result)
            self.cursor.execute("""insert into elements (request,motherRelational,message) values{0}""".format(self.result))
        self.connect.commit()
        self.connect.close()
if __name__ == '__main__':
    Pattern()
